import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Stack;
import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

public class PixelArtGenerator extends JFrame {
    private static int gridSize = 40; // Grid size (default)
    private static int cellSize = 20; // Size of each cell (pixels)
    private static Color defaultColor = Color.WHITE; // Default color of each cell
    private Color[][] grid; // Grid representing the pixel art
    private Color currentColor = Color.BLACK; // Current selected color
    private String currentTool = "Brush"; // Default tool
    private boolean showGrid = true; // Default to show grid

    private JPanel gridPanel;
    private JLabel statusBar;
    private JPanel sidebar;
    private Stack<Color[][]> undoStack = new Stack<>();
    private Stack<Color[][]> redoStack = new Stack<>();

    public PixelArtGenerator() {
        initializeGrid();
        setupFrame();
        setupMenuBar();
        setupSidebar();
    }

    private void initializeGrid() {
        grid = new Color[gridSize][gridSize];
        for (int i = 0; i < gridSize; i++) {
            for (int j = 0; j < gridSize; j++) {
                grid[i][j] = defaultColor;
            }
        }
    }

    private void setupFrame() {
        setTitle("Pixel Art Generator");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 600); // Adjust size as needed
        setLocationRelativeTo(null);

        // Create a JPanel for the grid
        gridPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                for (int i = 0; i < gridSize; i++) {
                    for (int j = 0; j < gridSize; j++) {
                        g.setColor(grid[i][j]);
                        g.fillRect(i * cellSize, j * cellSize, cellSize, cellSize);
                        if (showGrid) {
                            g.setColor(Color.BLACK); // Gridline color
                            g.drawRect(i * cellSize, j * cellSize, cellSize, cellSize);
                        }
                    }
                }
            }
        };
        gridPanel.setBackground(Color.BLACK);
        gridPanel.setPreferredSize(new Dimension(gridSize * cellSize, gridSize * cellSize));
        gridPanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                int x = e.getX() / cellSize;
                int y = e.getY() / cellSize;
                if (x >= 0 && x < gridSize && y >= 0 && y < gridSize) {
                    applyTool(x, y);
                    gridPanel.repaint();
                }
            }
        });

        // Use BorderLayout for content panel
        JPanel contentPanel = new JPanel(new BorderLayout());
        contentPanel.add(gridPanel, BorderLayout.CENTER);

        // Sidebar
        sidebar = new JPanel();
        sidebar.setLayout(new BorderLayout()); // Adjusted for better alignment
        sidebar.setBackground(Color.DARK_GRAY);
        sidebar.setPreferredSize(new Dimension(150, 600));

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(6, 1, 5, 5)); // Adjust for additional buttons
        buttonPanel.setBackground(Color.DARK_GRAY);

        JButton brushButton = new JButton("Brush");
        brushButton.addActionListener(e -> selectTool("Brush"));

        JButton eraserButton = new JButton("Eraser");
        eraserButton.addActionListener(e -> selectTool("Eraser"));

        JButton colorButton = new JButton("Color Picker");
        colorButton.addActionListener(e -> selectColor());

        JButton fillBucketButton = new JButton("Fill Bucket");
        fillBucketButton.addActionListener(e -> selectTool("Fill Bucket"));

        JButton gridToggleButton = new JButton("Toggle Grid");
        gridToggleButton.addActionListener(e -> toggleGrid());

        JButton savePngButton = new JButton("Save as PNG");
        savePngButton.addActionListener(e -> saveFile());

        buttonPanel.add(brushButton);
        buttonPanel.add(eraserButton);
        buttonPanel.add(colorButton);
        buttonPanel.add(fillBucketButton);
        buttonPanel.add(gridToggleButton);
        buttonPanel.add(savePngButton);

        sidebar.add(buttonPanel, BorderLayout.CENTER);

        add(contentPanel, BorderLayout.CENTER);
        add(sidebar, BorderLayout.WEST);

        // Status Bar
        statusBar = new JLabel("Grid Size: " + gridSize + "x" + gridSize + " | Current Tool: Brush | Current Color: BLACK");
        statusBar.setForeground(Color.WHITE);
        statusBar.setOpaque(true);
        statusBar.setBackground(Color.DARK_GRAY);
        add(statusBar, BorderLayout.SOUTH);

        pack(); // Adjusts frame size based on its components
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void setupMenuBar() {
        JMenuBar menuBar = new JMenuBar();
        menuBar.setBackground(Color.DARK_GRAY);
        menuBar.setForeground(Color.WHITE);

        // File Menu
        JMenu fileMenu = new JMenu("File");
        fileMenu.setForeground(Color.WHITE);
        JMenuItem newMenuItem = new JMenuItem("New");
        newMenuItem.addActionListener(e -> newFile());
        JMenuItem saveMenuItem = new JMenuItem("Save");
        saveMenuItem.addActionListener(e -> saveFile());
        JMenuItem loadMenuItem = new JMenuItem("Load");
        loadMenuItem.addActionListener(e -> loadFile());
        fileMenu.add(newMenuItem);
        fileMenu.add(saveMenuItem);
        fileMenu.add(loadMenuItem);

        // Edit Menu
        JMenu editMenu = new JMenu("Edit");
        editMenu.setForeground(Color.WHITE);
        JMenuItem undoMenuItem = new JMenuItem("Undo");
        undoMenuItem.addActionListener(e -> undo());
        JMenuItem redoMenuItem = new JMenuItem("Redo");
        redoMenuItem.addActionListener(e -> redo());
        JMenuItem clearMenuItem = new JMenuItem("Clear Grid");
        clearMenuItem.addActionListener(e -> clearGrid());
        editMenu.add(undoMenuItem);
        editMenu.add(redoMenuItem);
        editMenu.add(clearMenuItem);

        // Grid Menu
        JMenu gridMenu = new JMenu("Grid");
        gridMenu.setForeground(Color.WHITE);
        JMenuItem resizeMenuItem = new JMenuItem("Resize Grid");
        resizeMenuItem.addActionListener(e -> resizeGrid());
        gridMenu.add(resizeMenuItem);

        menuBar.add(fileMenu);
        menuBar.add(editMenu);
        menuBar.add(gridMenu);

        setJMenuBar(menuBar);
    }

    private void selectTool(String tool) {
        currentTool = tool;
        updateStatusBar();
    }

    private void applyTool(int x, int y) {
        addToUndoStack();
        switch (currentTool) {
            case "Brush":
                grid[x][y] = currentColor;
                break;
            case "Eraser":
                grid[x][y] = defaultColor;
                break;
            case "Fill Bucket":
                fillBucket(x, y, grid[x][y]);
                break;
        }
        gridPanel.repaint();
    }

    private void fillBucket(int x, int y, Color targetColor) {
        if (x < 0 || y < 0 || x >= gridSize || y >= gridSize || !grid[x][y].equals(targetColor) || grid[x][y].equals(currentColor)) {
            return;
        }
        grid[x][y] = currentColor;
        fillBucket(x + 1, y, targetColor);
        fillBucket(x - 1, y, targetColor);
        fillBucket(x, y + 1, targetColor);
        fillBucket(x, y - 1, targetColor);
    }

    private void toggleGrid() {
        showGrid = !showGrid;
        gridPanel.repaint();
    }

    private void newFile() {
        initializeGrid();
        addToUndoStack();
        updateStatusBar();
        gridPanel.repaint();
    }

    private void saveFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("PNG Images", "png"));
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            if (!file.getName().toLowerCase().endsWith(".png")) {
                file = new File(file.getAbsolutePath() + ".png");
            }
            try {
                BufferedImage image = new BufferedImage(gridSize * cellSize, gridSize * cellSize, BufferedImage.TYPE_INT_RGB);
                Graphics g = image.getGraphics();
                for (int i = 0; i < gridSize; i++) {
                    for (int j = 0; j < gridSize; j++) {
                        g.setColor(grid[i][j]);
                        g.fillRect(i * cellSize, j * cellSize, cellSize, cellSize);
                    }
                }
                ImageIO.write(image, "png", file);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error saving file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void loadFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("PNG Images", "png"));
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                BufferedImage image = ImageIO.read(file);
                for (int i = 0; i < gridSize; i++) {
                    for (int j = 0; j < gridSize; j++) {
                        grid[i][j] = new Color(image.getRGB(i * cellSize, j * cellSize));
                    }
                }
                addToUndoStack();
                gridPanel.repaint();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error loading file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void resizeGrid() {
        String input = JOptionPane.showInputDialog(this, "Enter new grid size (1-100):", gridSize);
        try {
            int newSize = Integer.parseInt(input);
            if (newSize >= 1 && newSize <= 100) {
                Color[][] newGrid = new Color[newSize][newSize];
                for (int i = 0; i < newSize; i++) {
                    for (int j = 0; j < newSize; j++) {
                        if (i < gridSize && j < gridSize) {
                            newGrid[i][j] = grid[i][j];
                        } else {
                            newGrid[i][j] = defaultColor;
                        }
                    }
                }
                grid = newGrid;
                gridSize = newSize;
                gridPanel.setPreferredSize(new Dimension(gridSize * cellSize, gridSize * cellSize));
                addToUndoStack();
                updateStatusBar();
                gridPanel.repaint();
                pack(); // Adjust the frame size to fit the new grid
            } else {
                JOptionPane.showMessageDialog(this, "Grid size must be between 1 and 100.", "Invalid Input", JOptionPane.WARNING_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid number format.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void clearGrid() {
        initializeGrid();
        addToUndoStack();
        gridPanel.repaint();
    }

    private void selectColor() {
        Color newColor = JColorChooser.showDialog(this, "Choose a Color", currentColor);
        if (newColor != null) {
            currentColor = newColor;
            updateStatusBar();
        }
    }

    private void updateStatusBar() {
        statusBar.setText("Grid Size: " + gridSize + "x" + gridSize + " | Current Tool: " + currentTool + " | Current Color: " + getColorName(currentColor));
    }

    private String getColorName(Color color) {
        if (color.equals(Color.BLACK)) return "BLACK";
        if (color.equals(Color.WHITE)) return "WHITE";
        if (color.equals(Color.RED)) return "RED";
        if (color.equals(Color.GREEN)) return "GREEN";
        if (color.equals(Color.BLUE)) return "BLUE";
        if (color.equals(Color.GRAY)) return "GRAY";
        return "CUSTOM";
    }

    private void addToUndoStack() {
        undoStack.push(deepCopyGrid(grid));
        redoStack.clear(); // Clear redo stack whenever a new action is performed
    }

    private void undo() {
        if (!undoStack.isEmpty()) {
            redoStack.push(deepCopyGrid(grid));
            grid = undoStack.pop();
            gridPanel.repaint();
        }
    }

    private void redo() {
        if (!redoStack.isEmpty()) {
            undoStack.push(deepCopyGrid(grid));
            grid = redoStack.pop();
            gridPanel.repaint();
        }
    }

    private Color[][] deepCopyGrid(Color[][] original) {
        Color[][] copy = new Color[original.length][];
        for (int i = 0; i < original.length; i++) {
            copy[i] = original[i].clone();
        }
        return copy;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(PixelArtGenerator::new);
    }

    private void setupSidebar() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
